# This example implements a spelling correction algorithm. The rough idea is 
# as follows: On line 1 we set input, which is a (possibly) misspelled word. 
# We then pick a word (potential_match) at random from a dictionary (lines 3-12). 
# We then compare, one by one, the characters of input and potential_match. For 
# each character we observe that the characters of input and potential_match are 
# the same (input[i] == potential_match[k]). This is done using L-conditioning, 
# which means that the rank of a potential match is increased by one unit, if the
# characters at i and k don't match. If the characters match, we increase the 
# pointers i and k and repeat the process. If the characters don't match, we 
# consider three possibilities and generate the corresponding alternatives using 
# an either-or statement:
#
# 1 There is a misspelling (e.g. when writing cot instead of cat). 
#   We increase i and k.
# 2 There is an insertion (e.g. when writing cart instead of cat). 
#   We increase only i.
# 3 There is an omission (e.g. when writing ct instead of cat). 
#   We increase only k.
#
# At the end we use a normal observe statement to condition on the fact that 
# all characters were processed.

input := "foorteen";

dictionary := [
"one", "two", "three", "four", "five", 
"six", "seven", "eight", "nine", "ten", "eleven", 
"twelve", "thirteen", "fourteen", "fifteen", "sixteen",
"seventeen", "eighteen", "nineteen", "twenty"
];

# Randomly choose word from dictionary
choice := << 0 ... len(dictionary) >>;
potential_match := dictionary[choice];

# Initialize counters (i iterates over input, k over match)
i := 0; k := 0;

# While there are characters left to match ...
while (i < len(input) & k < len(potential_match)) do {
	observe-l (1) input[i] == potential_match[k];
	if (input[i] == potential_match[k]) then {
		i := i + 1;
		k := k + 1;
	} else {
		either {
			i := i + 1;
			k := k + 1;
		} or {
			i := i + 1;
		} or {
			k := k + 1;
		}
	}
};
observe i == len(input) & k == len(potential_match);
return potential_match;






