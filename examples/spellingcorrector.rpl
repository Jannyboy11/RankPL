define main() {
	input := "tweleven";
	return correctSpelling(getDictionary(), input);
};

define getDictionary() {
	dict := array[21];
	dict[0] := "zero";	dict[1] := "one";	dict[2] := "two";	
	dict[3] := "three";	dict[4] := "four";	dict[5] := "five";
	dict[6] := "six";	dict[7] := "seven";	dict[8] := "eight";
	dict[9] := "nine";	dict[10] := "ten";	dict[11] := "eleven";
	dict[12] := "twelve";	dict[13] := "thirteen";	dict[14] := "fourteen";
	dict[15] := "fifteen";	dict[16] := "sixteen";	dict[17] := "seventten";
	dict[18] := "eighteen";	dict[19] := "nineteen";	dict[20] := "twenty";
	return dict;
};

define correctSpelling(dictionary, input) {
	
	# Randomly choose word from dictionary
	choice := << 0 ... len(dictionary) >>;
	word := dictionary[choice];

	# Initialize counters (ii iterates over input, id over word)
	ii := 0;
	id := 0;

	# While there are characters left to match ...
	while (ii < len(input) | id < len(word)) do {

		normally (1) {
			# Normally we expect input to match word
			observe ii < len(input) & id < len(word) & input[ii] == word[id];
			ii := ii + 1;
			id := id + 1;
		} exceptionally {
			# Exceptional cases
			normally (1) either {
				# Two characters swapped
				observe ii < len(input) - 1 & id < len(word) - 1 
					& input[ii] == word[id+1]			
					& input[ii+1] == word[id];
				ii := ii + 2;
				id := id + 2;
			} or {
				# Extra character in input
		                observe ii < len(input);
		                ii := ii + 1;
		        } or {
				# Character missing in input
		                observe id < len(word);
		                id := id + 1;
			} exceptionally {
				# Character mismatch
		                observe ii < len(input) & id < len(word) & input[ii] != word[id];
		                ii := ii + 1;
		                id := id + 1;
			};
		};
	};
	return word;
};

