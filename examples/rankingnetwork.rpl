#
# This example shows how RPL can be used to represent ranking networks. Ranking net-
# works are the ranking-based counterpart of Bayesian networks [1]. They have also
# been called OCF networks [2]. The figure below depicts a ranking network for the 
# typical rain-sprinkler-wet example. There are three boolean variables: R (rain),
# S (sprinkler on) and W (grass is wet), each associated with a conditional ranking
# table. They encode that (1) It normally rains (firmness 1); (2) the sprinkler is 
# off if it rains (firmness 3) and on otherwise (firmness 1); (3) rain and sprinkler 
# affect wetness of the grass, which is dry if both are false (firmness ∞), wet if 
# just one is true (firmness 2), and wet if both are true (firmness 5).
#
#       R
#      T F         
#      ---      R	
#      0 1      |\        | W
#               | \     SR|T F
#     | S       |  \    --+----- 
#    R|T F      |   \   FF|∞ 0
#    -+---      |    |  FT|0 2
#    F|0 1      v    v  TF|0 2
#    T|3 0      S--->W  TT|0 5
#               
# The program below encodes this ranking network. We use the variables r, s and w 
# for the events and the values 0 and 1 to represent false and true. To encode the 
# network we use a recipe similar to the one used to encode Bayesian networks in 
# probabilistic programming languages (see, e.g., [3]). That is, we traverse the 
# network in topological order and encode the CRTs using default choice inside 
# if-then-else statements. 
#
# Running this program yields the ranking represented by this ranking network: 
#
#  java -jar RankPL.jar examples/rankingnetwork.rpl 10 (ENTER)
#
#  Rank 0: [r=1, s=0, w=1]
#  Rank 1: [r=0, s=1, w=1]
#  Rank 2: [r=0, s=0, w=0]
#  Rank 2: [r=1, s=0, w=0]
#  Rank 3: [r=1, s=1, w=1]
#  Rank 3: [r=0, s=1, w=0]
#  Rank 8: [r=1, s=1, w=0]
#
# Inference can be modeled simply by adding an observe statement at the end. 
# Suppose we observe that the sprinkler is on, i.e., we add the statement
# 
#    OBSERVE s == 1;
# 
# and run it as above. The program then yields the outcome shown below. It tells
# us that it normally does not rain but that the grass is wet.
#
#  Rank 0: [r=0, s=1, w=1]
#  Rank 2: [r=1, s=1, w=1]
#  Rank 2: [r=0, s=1, w=0]
#  Rank 7: [r=1, s=1, w=0]
#
# [1] Spohn, W., The Laws of Belief (Ranking Theory and Its Philosophical Appli-
#     cations. Oxford University Press (2014).
#
# [2] Benferhat, S., Tabia, K., Belief change in OCF-based networks in presence 
#     of sequences of observations and interventions: Application to alert cor-
#     relation. In: Proceedings of PRICAI 2010: Trends in Artificial Intelligence,
#	  Lecture Notes in Computer Science, vol. 6230, pp. 14–26. Springer (2010).
#
# [3] Gordon, A.D., Henzinger, T.A., Nori, A.V., Rajamani, S.K.: Probabilistic 
#     programming. Proceedings of FOSE 2014, 2014. pp. 167–181. ACM (2014).
#

r := 1 << 1 >> 0;
IF (r == 0) THEN s := 1 << 1 >> 0 ELSE s := 0 << 3 >> 1;
IF ((r == 0) & (s == 0)) THEN w := 0 
ELSE IF ((r == 1) & (s == 1)) THEN w := 1 << 5 >> 0
ELSE w := 1 << 2 >> 0;
#OBSERVE s == 1;